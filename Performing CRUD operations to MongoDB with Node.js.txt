Here’s a step-by-step guide to performing CRUD operations using Node.js, MongoDB, and Mongoose.

1. Set Up Your Environment
Ensure you have:

Node.js installed
MongoDB installed and running locally or use a cloud MongoDB service like MongoDB Atlas.
2. Initialize a Node.js Project
Start by creating a new project and installing the required dependencies.

bash
Copy code
mkdir crud-with-mongoose
cd crud-with-mongoose
npm init -y
npm install mongoose express body-parser
mongoose: ODM (Object Data Modeling) library for MongoDB.
express: Framework to handle HTTP requests.
body-parser: Parses JSON data from incoming requests.
3. Connect to MongoDB
Create a file server.js and set up the connection.

javascript
Copy code
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.json());

// MongoDB Connection
mongoose.connect('mongodb://127.0.0.1:27017/crudDB', { 
  useNewUrlParser: true, 
  useUnifiedTopology: true 
})
  .then(() => console.log('MongoDB Connected'))
  .catch(err => console.error(err));

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
Replace the connection string with your MongoDB Atlas URI if using a cloud database.

4. Define a Mongoose Schema and Model
Create a schema to define the structure of your MongoDB documents.

javascript
Copy code
// models/Item.js
const mongoose = require('mongoose');

const ItemSchema = new mongoose.Schema({
  name: { type: String, required: true },
  quantity: { type: Number, required: true },
  price: { type: Number, required: true }
});

module.exports = mongoose.model('Item', ItemSchema);
5. Set Up Routes for CRUD Operations
Add routes in server.js for Create, Read, Update, and Delete operations.

javascript
Copy code
const Item = require('./models/Item');

// CREATE: Add a new item
app.post('/items', async (req, res) => {
  try {
    const newItem = new Item(req.body);
    const savedItem = await newItem.save();
    res.status(201).json(savedItem);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// READ: Get all items
app.get('/items', async (req, res) => {
  try {
    const items = await Item.find();
    res.status(200).json(items);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// READ: Get a single item by ID
app.get('/items/:id', async (req, res) => {
  try {
    const item = await Item.findById(req.params.id);
    if (!item) return res.status(404).json({ message: 'Item not found' });
    res.status(200).json(item);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// UPDATE: Update an item by ID
app.put('/items/:id', async (req, res) => {
  try {
    const updatedItem = await Item.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!updatedItem) return res.status(404).json({ message: 'Item not found' });
    res.status(200).json(updatedItem);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// DELETE: Remove an item by ID
app.delete('/items/:id', async (req, res) => {
  try {
    const deletedItem = await Item.findByIdAndDelete(req.params.id);
    if (!deletedItem) return res.status(404).json({ message: 'Item not found' });
    res.status(200).json({ message: 'Item deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});
6. Run the Server
Run the server using:

bash
Copy code
node server.js
Your CRUD operations are now available at:

POST /items: Add a new item
GET /items: Fetch all items
GET /items/:id: Fetch a single item by ID
PUT /items/:id: Update an item by ID
DELETE /items/:id: Remove an item by ID
7. Test the API
You can test the API using tools like Postman, curl, or a browser extension like REST Client.

Example Requests:
Create an Item:

URL: POST http://localhost:3000/items
Body (JSON):
json
Copy code
{
  "name": "Notebook",
  "quantity": 5,
  "price": 3.5
}
Get All Items:

URL: GET http://localhost:3000/items
Get Item by ID:

URL: GET http://localhost:3000/items/<item-id>
Update an Item:

URL: PUT http://localhost:3000/items/<item-id>
Body (JSON):
json
Copy code
{
  "name": "Updated Notebook",
  "quantity": 10,
  "price": 4.0
}
Delete an Item:

URL: DELETE http://localhost:3000/items/<item-id>
8. Folder Structure After Completion
csharp
Copy code
crud-with-mongoose/
├── models/
│   └── Item.js          // Mongoose schema and model
├── server.js            // Main server logic
├── package.json         // Project configuration
└── node_modules/        // Installed dependencies
9. Optional Enhancements
Add input validation using Joi or Mongoose validation.
Integrate authentication with JWT.
Deploy to platforms like Heroku or AWS.