To develop a user registration and login system using HTML, CSS, and Express.js with secure password handling and session management, follow these steps:

1. Set Up Your Project
First, create a new Node.js project:

bash
Copy code
mkdir user-auth-system
cd user-auth-system
npm init -y
npm install express bcryptjs express-session
Express: Web framework for building the server.
bcryptjs: For hashing and comparing passwords securely.
express-session: For managing sessions.
2. Project Structure
Here’s how your project folder can be structured:

arduino
Copy code
user-auth-system/
  ├── public/
  │   ├── styles.css
  ├── views/
  │   ├── index.html
  │   ├── login.html
  │   ├── register.html
  ├── app.js
3. Create the Express Server (app.js)
Set up a basic Express server that handles registration, login, and session management.

javascript
Copy code
const express = require('express');
const bcrypt = require('bcryptjs');
const session = require('express-session');
const app = express();

// Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public')); // Serve static files (CSS)
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: true
}));

// Dummy database to store users
const users = [];

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/views/index.html');
});

app.get('/register', (req, res) => {
  res.sendFile(__dirname + '/views/register.html');
});

app.get('/login', (req, res) => {
  res.sendFile(__dirname + '/views/login.html');
});

// Registration route
app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  
  // Hash the password before saving it
  const hashedPassword = await bcrypt.hash(password, 10);

  // Save user to the "database"
  users.push({ username, password: hashedPassword });
  
  res.redirect('/login');
});

// Login route
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  
  const user = users.find(u => u.username === username);
  
  if (user && await bcrypt.compare(password, user.password)) {
    req.session.user = user;
    res.redirect('/dashboard');
  } else {
    res.send('Invalid credentials');
  }
});

// Dashboard route (protected)
app.get('/dashboard', (req, res) => {
  if (!req.session.user) {
    return res.redirect('/login');
  }
  res.send(`<h1>Welcome ${req.session.user.username}</h1>`);
});

// Logout route
app.get('/logout', (req, res) => {
  req.session.destroy((err) => {
    res.redirect('/');
  });
});

app.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});
4. Create the Registration Page (register.html)
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="form-container">
    <h2>Register</h2>
    <form action="/register" method="POST">
      <input type="text" name="username" placeholder="Username" required>
      <input type="password" name="password" placeholder="Password" required>
      <button type="submit">Register</button>
    </form>
    <p>Already have an account? <a href="/login">Login</a></p>
  </div>
</body>
</html>
5. Create the Login Page (login.html)
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="form-container">
    <h2>Login</h2>
    <form action="/login" method="POST">
      <input type="text" name="username" placeholder="Username" required>
      <input type="password" name="password" placeholder="Password" required>
      <button type="submit">Login</button>
    </form>
    <p>Don't have an account? <a href="/register">Register</a></p>
  </div>
</body>
</html>
6. Add CSS (styles.css)
Add basic styling for your forms in the public/styles.css file:

css
Copy code
body {
  font-family: Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f5f5f5;
}

.form-container {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

input {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #45a049;
}

a {
  color: #007BFF;
}
7. Run the Application
Now, you can run the server:

bash
Copy code
node app.js
8. Test the Application
Navigate to http://localhost:3000/register to register a new user.
After registering, go to http://localhost:3000/login to log in.
If the login is successful, you will be redirected to the dashboard.
You can log out by going to http://localhost:3000/logout.